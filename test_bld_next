#!/usr/bin/bash

# Copyright 2019-2022 VMware, Inc.
# SPDX-License-Identifier: Apache-2

# shellcheck disable=SC2155,SC2001,SC2038,SC2035

## ensure cert and keys are in sub-directory certs off the directory that this script is run from
## need to enusre OpenSSl certs for build machine are valid else need to use '--no-check-certificate'

export CICD_SALT_DIST_VERSION="3005.1"
export CICD_SALT_VERSION="${CICD_SALT_DIST_VERSION}"
export CICD_SALT_RELEASE="1"
export CICD_SALT_DATE="Thu Jan 1 1970"
## CICD_SALT_LOCATION: "git+https://github.com/saltstack/salt@${CI_COMMIT_REF_NAME}#egg=salt"
export CICD_SALT_LOCATION="salt"

## if CICD_SALT_DEV_BRANCH is not master assume contains tagged version or branch desired, v3003.1, freeze
## export CICD_SALT_DEV_BRANCH="master"
export CICD_SALT_DEV_BRANCH="v${CICD_SALT_VERSION}"

export CICD_ZEROMQ_VER="4.3.3"
export CICD_PYTHON_VER="3.9.14"
## export CICD_PYTHON_VER="3.7.10"
export CICD_OPENSSL_VER="1.1.1q"
export OPT_SALT_PATH="tiamat"
export PYINSTALLER_VER="5.5"
export ARCH=""
ARCH="$(uname -p)"

oldpwd=$(pwd)
rm -fR dist
rm -fR build
rm -fR dev_openssl
rm -fR dev_python3
rm -fR dev_pyinstaller
if [[ -h "/${OPT_SALT_PATH}" ]]; then rm -f "/${OPT_SALT_PATH}"; fi
if [[ -d "/opt/saltstack" ]]; then rm -fR "/opt/saltstack"; fi
if [[ -d "/opt/local/etc/salt" ]]; then rm -fR "/opt/local/etc/salt"; fi
if [[ -f "/usr/bin/salt-call" ]]; then rm -f "/usr/bin/salt-call"; fi
if [[ -f "/usr/bin/salt-minion" ]]; then rm -f "/usr/bin/salt-minion"; fi
mkdir dev_openssl
mkdir dev_python3
mkdir dev_pyinstaller
mkdir -p /usr/local/lib
mkdir -p /usr/local/bin
pkg change-facet facet.devel=true
pkg install gcc system/header developer/build/pkg-config git developer/build/make text/gnu-patch developer/build/gnu-make text/gnu-grep
export  PKG_CONFIG_PATH=/usr/lib/64/pkgconfig
export PATH=/usr/gnu/bin:$PATH
export CFLAGS=""
CFLAGS=$(pkg-config --cflags libffi)
export PATH=$PATH:/usr/perl5/bin
cd "${oldpwd}" || exit
cd dev_openssl || exit
wget --no-check-certificate https://www.openssl.org/source/openssl-${CICD_OPENSSL_VER}.tar.gz
tar -xvzf openssl-${CICD_OPENSSL_VER}.tar.gz
cd "openssl-${CICD_OPENSSL_VER}" || exit
export OPENSSL_COMPLIER=""
if [[ "sparc" = "${ARCH}" ]]; then OPENSSL_COMPLIER="solaris64-sparcv9-gcc"; else OPENSSL_COMPLIER="solaris64-x86_64-gcc"; fi
./Configure "${OPENSSL_COMPLIER}" --prefix=/usr/local/openssl --openssldir=/usr/local/openssl 2>&1 | tee ~/myopenssl.log
make 2>&1 | tee -a ~/myopenssl.log
make install 2>&1 | tee -a ~/myopenssl.log
cd /usr/bin || exit
if [[ ! -e /usr/bin/openssl.orig ]]; then
    mv openssl openssl.orig
    ln -s /usr/local/openssl/bin/openssl /usr/bin/openssl
fi
export LDFLAGS+=$(PKG_CONFIG_PATH=/usr/local/openssl/lib/pkgconfig pkg-config --libs-only-L libcrypto libssl)
export CPPFLAGS+=$(PKG_CONFIG_PATH=/usr/local/openssl/lib/pkgconfig pkg-config --cflags libcrypto libssl)
export CFLAGS+=$(PKG_CONFIG_PATH=/usr/local/openssl/lib/pkgconfig pkg-config --cflags libcrypto libssl)
export CFLAGS="-DFFI_NO_RAW_API -I/usr/lib/amd64/libffi-3.2.1/include -I/usr/local/openssl/include"
crle -l /usr/local/openssl/lib:/usr/local/lib:/lib:/usr/lib
crle -64 -l /usr/local/openssl/lib:/usr/local/lib:/lib/64:/usr/lib/64
cd "${oldpwd}" || exit
cd dev_python3 || exit
wget --no-check-certificate https://www.python.org/ftp/python/${CICD_PYTHON_VER}/Python-${CICD_PYTHON_VER}.tgz
tar -xvzf Python-${CICD_PYTHON_VER}.tgz
cd "Python-${CICD_PYTHON_VER}" || exit
export LD_LIBRARY_PATH=/usr/local/openssl/lib:/usr/local/lib:$LD_LIBRARY_PATH
export PATH=/usr/local/openssl/bin:/usr/local/bin:$PATH
export LD_RUN_PATH=/usr/local/openssl/lib:/usr/local/lib:$LD_RUN_PATH
cd Lib/ctypes || exit
patch -N < "${oldpwd}/solaris11_crle.patch"
cd "${oldpwd}/dev_python3/Python-${CICD_PYTHON_VER}" || exit
export PYTHON_OPTS=""
if [[ "sparc" = "${ARCH}" ]]; then PYTHON_OPTS="--enable-shared --enable-ipv6"; else PYTHON_OPTS="--enable-optimizations --enable-shared --enable-ipv6"; fi
./configure "${PYTHON_OPTS}" 2>&1 | tee "${HOME}/mypython.log"
make altinstall 2>&1 | tee -a "${HOME}/mypython.log"
cd /usr/bin || exit
ln -s -f /usr/local/bin/python3.9 python3
ln -s -f /usr/local/bin/python3.9 python3.9
ln -s -f /usr/local/bin/python3.9-config python3.9-config
ln -s -f /usr/local/bin/pip3.9 pip3
## ln -s -f /usr/local/bin/python3.7 python3
## ln -s -f /usr/local/bin/python3.7 python3.7
## ln -s -f /usr/local/bin/python3.7m-config python3.7m-config
## ln -s -f /usr/local/bin/pip3.7 pip3
## PyInstaller bootloader for Solaris 11
## see https://pyinstaller.readthedocs.io/en/stable/bootloader-building.html#building-for-aix
## ensure empty environment
python3 -m pip install pyinstaller-hooks-contrib
python3 -m pip install altgraph
python3 -m pip install importlib-metadata==4.11.3
python3 -m pip install wheel
python3 -m pip install pop-config==9.0.0
rm -fR "${oldpwd}/dev_pyinstaller"
mkdir -p "${oldpwd}/dev_pyinstaller"
cd "${oldpwd}/dev_pyinstaller" || exit
## git clone -b v4.4 https://github.com/pyinstaller/pyinstaller.git # v4.3 and v4.4 fail to work on Solaris 11
git clone -b "v${PYINSTALLER_VER}" https://github.com/pyinstaller/pyinstaller.git
## could not get it or waf to work well, so simple solution of 2-3 days of trying, create a dummy executable /opt/freeware/bin/strip file which does nothing
echo '#!/usr/bin/bash' > /usr/gnu/bin/strip
echo "# dummy" >> /usr/gnu/bin/strip
chmod 755 /usr/gnu/bin/strip
chown root:bin /usr/gnu/bin/strip
cd pyinstaller/bootloader || exit
python3 ./waf configure all --gcc --target-arch=64bit
cd "${oldpwd}/dev_pyinstaller/pyinstaller" || exit
export PYINSTALLER_DIR=""
PYINSTALLER_DIR=$(pwd)
python3 setup.py install
cd "${oldpwd}" || exit
## Build zeromq for Solaris 11
rm -fR dev_zeromq
mkdir dev_zeromq
cd dev_zeromq || exit
wget https://github.com/zeromq/libzmq/releases/download/v${CICD_ZEROMQ_VER}/zeromq-${CICD_ZEROMQ_VER}.tar.gz  --secure-protocol=TLSv1_2
tar -xvzf zeromq-${CICD_ZEROMQ_VER}.tar.gz
chown -R root:root zeromq-${CICD_ZEROMQ_VER}
cd "zeromq-${CICD_ZEROMQ_VER}" || exit
./configure
gmake
gmake install
cd "${oldpwd}" || exit
python3 -m pip install --upgrade tiamat==7.10.7
export PATH="$PATH:${HOME}/.local/bin"
## build Salt
export CICD_SALT_DATE=""
CICD_SALT_DATE=$(date +"%a %b %0d %Y")
## export CICD_SALT_LOCATION_NB="git+https://github.com/saltstack/salt@$CICD_SALT_DEV_BRANCH#egg=salt"
## get Salt since salt-minion.xml and minion are needed below, and might as well used
## it since have it rather than go back out over the net
cd "${oldpwd}" || exit
## rm -fR dev_salt
## mkdir dev_salt
## cd dev_salt
## ## git clone https://github.com/saltstack/salt.git
## git clone -v -b ${CICD_SALT_DEV_BRANCH} https://github.com/saltstack/salt.git
## cd salt
## python3 setup.py -q sdist
## cd dist
cd dev_salt/salt/dist || exit
ls -alh
export CICD_SALT_TAR_GZ_NAME=""
export CICD_SALT_LOCATION_NB=""
export CICD_SALT_VERSION=""
CICD_SALT_TAR_GZ_NAME=$(ls salt-${CICD_SALT_DIST_VERSION}*.tar.gz)
CICD_SALT_LOCATION_NB=$(pwd)/${CICD_SALT_TAR_GZ_NAME}
CICD_SALT_VERSION=$(echo "${CICD_SALT_TAR_GZ_NAME}" | sed s/salt-// | sed s/.tar.gz//)
echo "${CICD_SALT_VERSION}"
echo "${CICD_SALT_RELEASE}"
echo "${CICD_SALT_LOCATION}"
echo "${CICD_SALT_LOCATION_NB}"
cd "${oldpwd}" || exit
rm -f solaris11_requirements.txt
cp requirements.txt solaris11_requirements.txt
sed -i 's&SALT_LOCATION&'"${CICD_SALT_LOCATION_NB}"'&' solaris11_requirements.txt
cat solaris11_requirements.txt
export CICD_SALT_VERSION_ADJ=""
CICD_SALT_VERSION_ADJ=$(echo "${CICD_SALT_VERSION}" | sed  "s/-/_/"g | sed "s/+/_/"g)
echo "CICD_SALT_VERSION_ADJ is $CICD_SALT_VERSION_ADJ"
export SUN_REPO_NAME=""
SUN_REPO_NAME="salt_sun11_repo_$(echo "${CICD_SALT_VERSION_ADJ}" | sed  "s/\./_/"g)"
echo "SUN_REPO_NAME is ${SUN_REPO_NAME}"
cd "${oldpwd}" || exit
## now build
sed -i 's&PYINSTALLER_LOCATION&'"${PYINSTALLER_DIR}"'&' build.conf
cat build.conf
## ensure clean area
rm -fR dist
rm -fR build
tiamat --log-file "${HOME}/tiamat.log" --log-level TRACE build -c build.conf 2>&1 | tee "${HOME}/mytiamat.log"
if [[ ! -f "dist/run/run" ]]; then
  echo "Failed to build tiamat, no dist/run/run" | tee -a ~/mytiamat.log
  exit 1
fi
## now package
find dist -name __pycache__ | xargs rm -fR
find dist -name "*.pyc" | xargs rm -f
find dist -name "*.pyo" | xargs rm -f
rm -f dist/run/setuptools/command/"launcher manifest.xml"
rm -f dist/run/setuptools/"script (dev).tmpl"
rm -fR dev_pkg
rm -f *.p5m*
sed -i 's&SOLARIS_ARCH&'"${ARCH}"'&' salt.mog
export SALT_VER_TO_USE=""
SALT_VER_TO_USE=$(echo "${CICD_SALT_VERSION_ADJ}" | awk -F '_' '{print $1}' | sed  "s/rc/\./"g)
## export SALT_VER_TO_USE=$(echo "${CICD_SALT_VERSION}" | awk -F '_' '{print $1}' | sed  "s/rc/\./"g)
sed -i 's&SALT_VER_TO_USE&'"${SALT_VER_TO_USE}"'&' salt.mog
cat salt.mog
./create_start_repository "${SUN_REPO_NAME}"
mkdir dev_pkg
mkdir -p dev_pkg/opt/saltstack/salt
mkdir -p dev_pkg/opt/saltstack/salt/config.dist
mkdir -p dev_pkg/opt/local/etc/salt
mkdir -p dev_pkg/opt/local/etc/salt/minion.d
mkdir -p dev_pkg/opt/local/etc/salt/pki/minion
mkdir -p dev_pkg/usr/bin
cp -R dist/run dev_pkg/opt/saltstack/salt/
cp salt-call salt-minion dev_pkg/usr/bin/
cp dev_salt/salt/pkg/solaris/salt-minion.xml dev_pkg/opt/saltstack/salt/config.dist/
cp dev_salt/salt/conf/minion dev_pkg/opt/local/etc/salt/
## remove x permission otherwise errors due to no python version specified
chmod 644 dev_pkg/opt/saltstack/salt/run/pip/_vendor/appdirs.py
chmod 644 dev_pkg/opt/saltstack/salt/run/pip/_vendor/chardet/cli/chardetect.py
chmod 644 dev_pkg/opt/saltstack/salt/run/pip/_vendor/requests/certs.py
chmod 644 dev_pkg/opt/saltstack/salt/run/pkg_resources/_vendor/appdirs.py
## cleanup dev_salt save space
## - rm -fR dev_salt
perl -pi -e 's/\/opt\/local\/bin/\/usr\/bin/' dev_pkg/opt/saltstack/salt/config.dist/salt-minion.xml
perl -pi -e 's/\/etc\/salt/\/opt\/local\/etc\/salt/' dev_pkg/opt/saltstack/salt/config.dist/salt-minion.xml
mkdir -p dev_pkg/lib/svc/manifest/site
mv dev_pkg/opt/saltstack/salt/config.dist/salt-minion.xml dev_pkg/lib/svc/manifest/site/
./generate_resolved_pkg "${oldpwd}/dev_pkg ${SUN_REPO_NAME}"
## Sign files here if desired
## values provided are examples
## pkgsign -s /export/${SUN_REPO_NAME} -a rsa-sha256 -c ${oldpwd}/certs/CompanyCert.crt -i ${oldpwd}/certs/CertProviderAuth.crt -i ${oldpwd}/certs/Root_Cert.crt -k ${oldpwd}/certs/code_signing.key '*'
pkgrecv -s "/export/${SUN_REPO_NAME}" -a -d "./salt-${CICD_SALT_VERSION_ADJ}_solaris11_${ARCH}.p5p" '*'
