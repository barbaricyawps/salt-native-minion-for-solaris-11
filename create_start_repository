#!/usr/bin/bash

# Copyright 2019-2022 VMware, Inc.
# SPDX-License-Identifier: Apache-2

# shellcheck disable=SC2128,SC2034,SC2082,SC2001,SC2162,SC2015

set -o functrace
set -o pipefail

# using bash for now, not path is for Solaris opencsw
# run this script as root

SCRIPT_VERSION='2022.11.04.01'


# helper functions

_timestamp() {
    date "+%Y-%m-%d %H:%M:%S:"
}

_log() {
    echo "$1" | sed "s/^/$(_timestamp) /" >>"${LOGGING}"
}

# Both echo and log
_display() {
    echo "$1"
    _log "$1"
}

_error() {
    msg="ERROR: $1"
    echo "$msg" 1>&2
    echo "$(_timestamp) $msg" >>"${LOGGING}"
    echo "One or more errors found. See ${LOGGING} for details." 1>&2
    exit 1
}

_warning() {
    msg="WARNING: $1"
    echo "$msg" 1>&2
    echo "$(_timestamp) $msg" >>"${LOGGING}"
}

_usage() {
    echo "usage: $0 <salt-package-repository>"
    echo "    Create 64-bit solaris 11 IPS package repository for specifc Salt version"
    echo "    for example for Salt version 3002.2:"
    echo "      $0 salt_sun11_repo_3002_2"
    echo " "
}


_yesno() {
read -p "Continue (y/n)?" choice
case "$choice" in
  y|Y ) echo "yes";;
  n|N ) echo "no";;
  * ) echo "invalid";;
esac
}

PUBLISHER_NAME='pub_name'   # Name of publisher, was SaltStack

# work functions

_create_start_repository() {
    _display "$0:$FUNCNAME create / start Sun ZFS repository for '${SUN_REPO_NAME}'"

    zfs list | /usr/gnu/bin/grep "export/${SUN_REPO_NAME}" && {
        _display "$0:$FUNCNAME ZFS area '${SUN_REPO_NAME}' already exists"
    } || {
        zfs create -o compression=on "rpool/export/${SUN_REPO_NAME}" || {
            _error "$0:$FUNCNAME failed to create ZFS area '${SUN_REPO_NAME}', retcode '${$?}'"
        }

        # turn of atime updates - speeds up system
        zfs set atime=off "rpool/export/${SUN_REPO_NAME}" || {
            _error "$0:$FUNCNAME failed to set atime off for ZFS area '${SUN_REPO_NAME}', retcode '${$?}'"
        }
    }

    pkgrepo verify -s "/export/${SUN_REPO_NAME}" 2>/dev/null && {
        _display "$0:$FUNCNAME package repo area '${SUN_REPO_NAME}' already exists"
    } || {
        pkgrepo create "/export/${SUN_REPO_NAME}" || {
            _error "$0:$FUNCNAME failed to create pkgrepo for '${SUN_REPO_NAME}', retcode '${$?}'"
        }

        pkgrepo set -s "/export/${SUN_REPO_NAME} publisher/prefix=${PUBLISHER_NAME}" || {
            _error "$0:$FUNCNAME failed to set publisher ${PUBLISHER_NAME} for pkgrepo '${SUN_REPO_NAME}', retcode '${$?}'"
        }

        ## Uncomment if going to sign package with pkgsign
        ## pkg set-property signature-policy require-signatures || {
        ##     _error "$0:$FUNCNAME failed to set signature-policy require-signatures , retcode '${$?}'"
        ## }

        ## pkg set-publisher --set-property signature-policy=require-signatures "${PUBLISHER_NAME}" || {
        ##     _error "$0:$FUNCNAME failed to set publisher property require-signatures for ${PUBLISHER_NAME}, retcode '${$?}'"
        ## }

        # set properties for repository
        svccfg -s application/pkg/server setprop pkg/inst_root="/export/${SUN_REPO_NAME}" || {
            _error "$0:$FUNCNAME failed to set inst_root property for repo '${SUN_REPO_NAME}', retcode '${$?}'"
        }

        svccfg -s application/pkg/server setprop pkg/readonly=false || {
            _error "$0:$FUNCNAME failed to set 'readonly/false' property for repo '${SUN_REPO_NAME}', retcode '${$?}'"
        }

        pkgrepo set -s "/export/${SUN_REPO_NAME} publisher/prefix=${PUBLISHER_NAME}" || {
            _error "$0:$FUNCNAME failed to set publisher ${PUBLISHER_NAME} for pkgrepo '${SUN_REPO_NAME}', retcode '${$?}'"
        }
    }

    # Start the repository with SMF
    svcadm enable application/pkg/server || {
        _error "$0:$FUNCNAME failed to enable the application package server, retcode '${$?}'"
    }
    svcs application/pkg/server || {
        _error "$0:$FUNCNAME checking if application package server is operational returned an error, retcode '${$?}'"
    }

    # check service is running
    pkgrepo info -s "/export/${SUN_REPO_NAME}" || {
        _error "$0:$FUNCNAME checking running service for repo '${SUN_REPO_NAME}' failed, retcode '${$?}'"
    }

    # set PUBLISHER_NAME as a publisher
    pkg set-publisher -p "/export/${SUN_REPO_NAME}" || {
        _error "$0:$FUNCNAME checking running service for repo '${SUN_REPO_NAME}' failed, retcode '${$?}'"
    }

    pkgrepo refresh -s "/export/${SUN_REPO_NAME}" || {
        _error "$0:$FUNCNAME refresh running service for repo '${SUN_REPO_NAME}' failed, retcode '${$?}'"
    }

    pkgrepo rebuild -s "/export/${SUN_REPO_NAME}" || {
        _error "$0:$FUNCNAME refresh running service for repo '${SUN_REPO_NAME}' failed, retcode '${$?}'"
    }
}

################################### MAIN ####################################

# static definitions

# PATH=/opt/local/bin:/opt/csw/bin:/opt/csw/sbin:/opt/csw/gnu:$PATH
# export PATH

CURRDIR=$(pwd)

_ret=

# Always 64bit right now
BYTEWIDTH='64bit'

ARCH_x86="i386"
ARCH_SPARC="sparc"
ARCH=

# OS Release
# get the OS level for Solaris that we are build on
SYSRELEASE_VER=$(uname -r)
SYSRELEASE_511='5.11'   # Solaris 11

OSRELEASE_VER=$( echo "${SYSRELEASE_VER}" | cut -d '.' -f2 )
OSRELEASE_DOTTED="solaris-2.${OSRELEASE_VER}"
OSRELEASE="solaris-2_${OSRELEASE_VER}"


#check platform first
if [[ $(uname -m) = 'i86pc' ]];then
    ARCH=${ARCH_x86}
elif [[ $(uname -m) = 'sun4v' ]]; then
    ARCH=${ARCH_SPARC}
else
    _error "$0 does not support this platform"
fi


# set logging infomation
# want verbose while developing
VERBOSE=1
LOGGING="/dev/null"

log_file_format="${CURRDIR}/$0-${OSRELEASE}-${ARCH}.%Y%m%d%H%M%S.log"
log_file="$(date \"+"${log_file_format}"\")"

if [[ "${VERBOSE}" -ne 0 ]];then
    LOGGING="${log_file}"
else
LOGGING="/dev/null"
fi


_display "$0: PATH is now set to '$PATH'"


if [[ $# -ne 1 ]]; then
    _usage
    exit 0
fi

SUN_REPO_NAME="$1"

_create_start_repository
